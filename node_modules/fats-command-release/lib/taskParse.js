/*
 * task parse
 * */

var _ = module.exports = function () {

};

var fats = require('fats');
var path = require('path');
require("date-format-lite");

/*
 * 解析banner
 * */
_.banner = function (banner) {
	var taskConfig = fats.taskConfig;
	var result = banner.replace(/<%=\s?(.*?)\s?%>/g, function (match, key) {
		try {
			if (/^fats\./.test(key)) {
				return eval('taskConfig.' + key);
			} else {
				return eval('taskConfig.taskList.' + key);
			}
		} catch (e) {
			return key;
		}
	});
	return result;
};

/*
 * 解析 files 相关参数，包含通配符或模板变量等
 * eg: ** => path/to/dir
 * eg: * => filename
 * */
_.filesPara = function (strPara, root, parseRegex) {
	var taskConfig = fats.taskConfig, arrPara = [], data = [];
	if (!fats.util.isArray(strPara)) {
		arrPara.push(strPara);
	} else {
		arrPara = strPara;
	}
	root = root.replace(/\\/g, '/');

	for (var i = 0; i < arrPara.length; i++) {
		var strPara = arrPara[i];
		var result = strPara
			.replace(/<%=\s?(.*?)\s?%>/g, function (match, key) {
				try {
					if (/^fats\./.test(key)) {
						return eval('taskConfig.' + key);
					} else {
						return eval('taskConfig.taskList.' + key);
					}
				} catch (e) {
					return key;
				}
			});

		// 需要解析里面的通配符
		if (parseRegex === true && !/[\^\$\(\)\[\]?!:]/.test(strPara)) {
			result = result.replace(/\./g, '\\.')
				.replace(/\//g, '\\/')
				.replace(/\*+/g, function (match, key) {
					if (/\*{2,}/.test(match)) {
						return '(.*?)';
					} else {
						return '([^\\/]*?)';
					}
				});
		}

		data.push(root + '/' + result);
	}

	return data;
};


/*
 * 返回正则匹配的文件列表
 * 默认不包含min版文件
 * */
_.regexFiles = function (regex, files) {
	var result = {
		files: [],
		totalSize: 0
	};

	regex = regex.replace(/\((\*)\)/g, function(match, key){
		return '([^\\/]*?)';
	});

	// min版本
	var minRegExp = new RegExp('[\.\-]min\.[a-z]{1,8}$', 'i');

	for (var file in files) {
		if (fats.util.isArray(regex)) {
			for (var i = 0; i < regex.length; i++) {
				var _temp = file.match(regex);
				if (_temp && !minRegExp.test(file)) {
					result.files.push(file);
					result.totalSize += files[file].size;
				}
			}
		} else {
			var _temp = file.match(regex);
			if (_temp) {
				result.files.push(_temp);
				result.totalSize += files[file].size;
			}
		}
	}
	return result;
};

/*
 * 将css的background-image增加MD5时间戳
 * */
_.cssImgMD5 = function (options) {

	var source = options.source, fileList = options.fileList, destRoot = options.destRoot;

	var d = fats.util.localDate(),
		timestamp = d.format('YYYYMMDD'),
		imgRegex = /(?:url\()(?!(http|https)\:\/\/)(.*?)(?:\))/gi;
	var result = source.replace(imgRegex, function (match, key1, key2) {
		key2 = key2.replace(/\?.*$/, '');

		// md5
		var searchKey = path.join(options.destRoot, key2).replace(/\\/g, '/');
		if (typeof fileList[searchKey] != 'undefined') {
			key2 += '?v=' + fileList[searchKey]['md5'];
		} else {
			key2 += '?v=' + timestamp;
		}

		// prefix
		if (options.urlPrefix) {
			key2 = path.join(options.urlPrefix, key2)
				.replace(/\\/g, '/')
				.replace(/\:\//, '://');
		}
		return 'url(' + key2 + ')';
	});
	return result;
};


