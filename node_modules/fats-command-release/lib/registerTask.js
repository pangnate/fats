module.exports = function () {

	var plugins = [
		'clean',  // 清理目录
		'csslint',  // css校验
		'jshint',  // js校验
		'uglify',  // js格式化压缩合并
		'cleancss' // css格式化压缩合并
	];

	var fats = this;
	var path = require('path');
	var fs = require('fs');
	var taskParser = require('./taskParse');
	var taskConfig = fats.taskConfig;
	var taskList = taskConfig.taskList;
	var env = taskConfig.env;

	/*
	 * 没有配置任务，则给出 warning 提示
	 * */
	if (!taskList) {
		fats.log.warning('No tasks need to be executed, has been terminated.');
		process.exit(0);
	}

	/*
	 * 遍历目录下的所有文件，缓存信息备用
	 * */
	var ndir = require('ndir');
	var walker = ndir.walk(env.root);
	var fileList = {};
	var dirList = [];
	walker.on('dir', function (dirpath, files) {
		for (var i = 0, l = files.length; i < l; i++) {
			var info = files[i];
			var src = info[0].replace(/\\{1,}/g, '/');

			// 不允许出现中文字符
			var regExp = /[^\x00-\xff]/i;
			if (regExp.test(src)) {
				fats.log.error('File name not allowed: ' + src, true);
			}

			// 缓存信息
			if (info[1].isFile()) {

				// 扩展名
				var ext = path.extname(src).toLowerCase();
				// 忽略列表
				var ignore = ['.psd', '.doc'];
				// 可能需要编译的文件后缀
				var needCompile = [
					'.html', '.htm', 'shtml', '.ftl', '.tpl', '.vm',
					'.css', '.less', '.sass',
					'.js', '.coffee',
					'.jpg', '.jpeg', '.png', '.gif', '.bmp',
				];
				// min版本
				var minRegExp = new RegExp('[\.\-]min' + ext + '$', 'i');
				if (fats.util.inArray(ext, needCompile) && !minRegExp.test(src)) {
					// 缓存文件信息
					var data = fats.util.read(src);
					var _temp = {
						md5: fats.util.md5(data),
						size: info[1].size
					};
					fileList[src] = _temp;
				}
			} else {
				dirList.push(src);
			}
		}
	});
	walker.on('error', function (err, errPath) {
		fats.log.error('%s error: %s', errPath, err);
	});
	walker.on('end', function () {
		cacheTask();
		runTask();
	});

	/*
	 * 解析并缓存所有任务
	 * */
	var cacheTask = function () {
		var topParsed = taskList._parsed = {};

		for (var taskName in taskList) {

			/*
			 * 注册任务名称，合法的则执行，不合法的则直接抛弃
			 * */
			if (!fats.util.inArray(taskName, plugins)) {
				continue;
			}

			/*
			 * taskObject: 系统规定的任务名称，如：csslint
			 * 对应相应的功能模块，不可更改
			 * */
			var taskObject = taskList[taskName];
			topParsed[taskName] = {options: {}};


			/*
			 * 解析其余任务分组
			 * */
			if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并

				/*
				 * 解析任务顶层 options 项
				 * */
				if (taskObject.hasOwnProperty('options')) {
					var taskOptions = taskObject.options;
					var _parsed = taskParser.options(taskOptions);
					topParsed[taskName].options = _parsed;
				}

				/*
				 * 存在 src 项
				 * */
				if (taskObject.hasOwnProperty('src') && taskObject.hasOwnProperty('dest')) {
					var _def = topParsed[taskName]['default'] = {
						options: topParsed[taskName].options
					};
					var _temp = taskParser.paseFilePara({
						src: taskObject.src,
						dest: taskObject.dest
					}, env.root);
					fats.util.extend(topParsed[taskName]['default'], _temp);
				} else if (!taskObject.hasOwnProperty('src') && !taskObject.hasOwnProperty('dest')) {
					/*
					 * 处理每个用户分组
					 * */
					for (var subTaskKey in taskObject) {

						if (subTaskKey == 'options') {
							continue;
						}

						/*
						 * subTaskKey: 用户自定义的任务组名称，不具有实际意义，如：foo
						 * subTask: 具体的子任务组
						 * subTaskOptions: 具体子任务组的 options 项
						 * */
						topParsed[taskName][subTaskKey] = {};
						var subTask = taskObject[subTaskKey];

						/*
						 * 解析分组 options 项
						 * */
						if (subTask.hasOwnProperty('options')) {
							var subTaskOptions = subTask.options;
							var _temp = taskParser.options(subTaskOptions);
							var _opt = topParsed[taskName][subTaskKey].options;
							topParsed[taskName][subTaskKey].options = fats.util.extend(_opt, _temp);
							delete subTask.options;
						} else {
							topParsed[taskName][subTaskKey].options = topParsed[taskName].options
						}

						/*
						 * 解析其余任务分组
						 * */
						if (subTask.hasOwnProperty('src') && subTask.hasOwnProperty('dest')) {
							var _temp = taskParser.paseFilePara(subTask, env.root);
							fats.util.extend(topParsed[taskName][subTaskKey], _temp);
						} else if (!subTask.hasOwnProperty('src') && !subTask.hasOwnProperty('dest')) {
							for (var _key in subTask) {
								var _subGroup = subTask[_key];
								if (_subGroup.hasOwnProperty('src') && _subGroup.hasOwnProperty('dest')) {
									var para = {
										src: _subGroup.src,
										dest: _subGroup.dest
									};
									var _temp = taskParser.paseFilePara(para, env.root);
									fats.util.extend(topParsed[taskName][subTaskKey], _temp);
								} else if (!_subGroup.hasOwnProperty('src') && !_subGroup.hasOwnProperty('dest')) {
									for (var _subKey in _subGroup) {
										var para = {
											src: _subGroup[_subKey],
											dest: _subKey
										};
										var _temp = taskParser.paseFilePara(para, env.root);
										fats.util.extend(topParsed[taskName][subTaskKey], _temp);
									}
								}
							}
						}

					}
				}

			} else if (fats.util.inArray(taskName, ['clean', 'csslint', 'jshint'])) {  //校验

				/*
				 * 解析任务顶层 options 项
				 * */
				if (taskObject.hasOwnProperty('options')) {
					topParsed[taskName].options = taskObject.options
				}

				/*
				 * 存在 src 项
				 * */
				if (taskObject.hasOwnProperty('src')) {
					topParsed[taskName].default = {
						options: taskObject.options || {}
					};
					var src = taskObject.src, _temp = [];
					if ('string' == typeof src && !/,/.test(src)) {
						_temp.push(taskParser.filesPara(src, env.root, true));
					} else if (fats.util.isArray(src)) {
						for (var i = 0; i < src.length; i++) {
							_temp.push(taskParser.filesPara(src[i], env.root, true));
						}
					}
					topParsed[taskName].default.src = _temp;
				} else {
					/**
					 * 不存在 src 则解析分组
					 */
					for (var groupName in taskObject) {
						if (groupName == 'options') {
							continue;
						}

						topParsed[taskName][groupName] = {};
						var _subTask = taskObject[groupName];
						if (_subTask.hasOwnProperty('options')) {
							(function (temp) {
								var _temp = fats.util.simpleCopy(temp);
								topParsed[taskName][groupName].options = fats.util.extend(_temp, _subTask.options);
							})(taskObject.options)
						} else {
							topParsed[taskName][groupName].options = {};
						}

						var src = _subTask.src, _temp = [];
						if ('string' == typeof src) {
							if (!/,/.test(src)) {
								src = taskParser.filesPara(src, env.root, true);
								_temp.push(src);
							} else {
								var _tempArr = src.split(',');
								for (var i = 0; i < _tempArr.length; i++) {
									_tempSrc = taskParser.filesPara(_tempArr[i], env.root, true);
									_temp.push(_tempSrc);
								}
							}
						} else if (fats.util.isArray(src)) {
							for (var i = 0; i < src.length; i++) {
								_temp.push(taskParser.filesPara(src[i], env.root, true));
							}
						}
						topParsed[taskName][groupName].src = _temp;
					}

				}
			}

		}

	};

	/*
	 * 写文件
	 * */
	var root = env.root.replace(/\\/g, '/');
	var writeFile = function (destFileName, code, srcFileSize, resultSize) {
		var shortName = destFileName.replace(root, '');
		srcFileSize = fats.util.formatFileSize(srcFileSize);
		resultSize = fats.util.formatFileSize(resultSize);
		var targetDir = path.dirname(destFileName);

		// 如果目标目录不存在则新建
		if (!fats.util.exists(targetDir)) {
			ndir.mkdir(targetDir, function (err) {
				fs.writeFileSync(destFileName, code);
			});
		} else {
			fs.writeFileSync(destFileName, code);
		}
		var key = destFileName.replace(/\\/g, '/');
		fileList[key] = {
			md5: fats.util.md5(code),
			size: code.length
		};
		console.log(' File ' + shortName.cyan + ' created: ' + srcFileSize.green + ' → ' + resultSize.green);
	};

	/*
	 * cleancss  编译 cleancss 任务
	 * @param String destFileName  目标文件
	 * @param Object result
	 * @param Object SubTask
	 * @param Boolean  是否为 $1 方式单个文件
	 * */
	var cleancss = function (destFileName, result, _tempSubTask, single) {

		// 总文件体积
		var srcFileSize = result.totalSize;  // src size

		// minify
		var CleanCSS = require('clean-css'), cleancss;

		// 处理文件字符
		var filterCssStr = function (temp, root) {
			cleancss = new CleanCSS({
				compatibility: fats.config.get('cssCompatibility') || '',
				root: root
			});
			var code = cleancss.minify(temp);
			// banner
			if (_tempSubTask.options && _tempSubTask.options.banner) {
				code = _tempSubTask.options.banner + code;
			}
			// md5 && urlPrefix
			var urlPrefix = false;
			if (_tempSubTask.options && _tempSubTask.options.urlPrefix) {
				urlPrefix = _tempSubTask.options.urlPrefix
			}
			code = taskParser.cssImgMD5({
				source: code,
				fileList: fileList,
				destRoot: path.dirname(destFileName),
				urlPrefix: urlPrefix
			});
			return code;
		};

		var temp = '';
		if (single == true) {  // 如果是单个文件
			temp = fats.util.read(result[0], true);
			var root = path.dirname(result[0]);
			var code = filterCssStr(temp, root);
			var srcFileSize = temp.length;
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		} else {  // 如果是普通匹配
			var code = '';
			for (var i = 0; i < result.files.length; i++) {
				temp = fats.util.read(result.files[i][0], true);
				var root = path.dirname(result.files[i][0]);
				code += filterCssStr(temp, root);
			}
			code = filterCssStr(code, false);
			var resultFileSize = code.length;

			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		}
	};


	/*
	 * uglify  编译 uglify 任务
	 * @param String destFileName  目标文件
	 * @param Object result
	 * @param Object SubTask
	 * @param Boolean  是否为 $1 方式单个文件
	 * */
	var uglify = function (destFileName, result, _tempSubTask, single) {

		// 处理文件字符
		var filterJsStr = function (code) {
			// banner
			if (_tempSubTask.options && _tempSubTask.options.banner) {
				code = _tempSubTask.options.banner + code;
			}
			return code;
		};

		// 总文件体积
		var srcFileSize = result.totalSize;  // src size

		var UglifyJS = require('uglify-js');
		var jsArr = [];

		if (single == true) {  // 如果是单个文件
			jsArr.push(result[0]);
			var code = UglifyJS.minify(jsArr).code;
			code = filterJsStr(code);
			var srcFileSize = fats.util.read(jsArr[0], true).length;
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		} else {  // 如果是普通匹配
			for (var i = 0; i < result.files.length; i++) {
				jsArr.push(result.files[i][0]);
			}
			var code = UglifyJS.minify(jsArr).code;
			code = filterJsStr(code);
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		}
	};


	/*
	 * 顺序执行任务
	 * */
	var runTask = function () {

		var topParsed = taskConfig.taskList._parsed;

		/*
		 * 如果存在 clean 任务
		 * */
		if (topParsed.hasOwnProperty('clean')) {
			var taskName = 'clean';
			console.log(' Run <' + taskName + '> task');
			var _tempTask = topParsed.clean;
			for (var _tempGroupName in _tempTask) {
				if (_tempGroupName == 'options') {
					continue;
				}
				var regex = _tempTask[_tempGroupName].src;
				var result = taskParser.regexDirs(regex, dirList);  // src
				for (var i = result.length - 1; i >= 0; i--) {
					fats.util.empty(result[i]);
					try {
						if (fs.statSync(result[i]).isDirectory()) {
							var _dir = result[i].replace(root, '');
							console.log(' Dir ' + _dir.cyan + ' cleaned.');
						}
					} catch (e) {
					}
				}
			}
			console.log(' ');
			delete topParsed.clean;
		}

		for (var taskName in topParsed) {

			console.log(' Run <' + taskName + '> task');

			if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并
				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					if (_tempGroupName == 'options') {
						continue;
					}
					var _tempSubTask = _tempTask[_tempGroupName];

					var dest = _tempSubTask.dest;
					var regex = _tempSubTask.src;
					var destFileName = dest;  // dest
					var result = taskParser.regexFiles(regex, fileList);  // src

					// 如果文件列表为空
					if (result.files.length == 0) {
						var str = ' <' + _tempGroupName + '> <' + dest.replace(root, '') + '>: No files, skipped';
						console.log(str.yellow.bold);
						continue;
					}

					/*
					 * 如果 dest中 出现 $1 之类，则需要每个文件单独处理
					 * */
					if (/\$\d+/.test(destFileName)) {

						for (var i = 0; i < result.files.length; i++) {
							var _file = result.files[i];
							var _destName = destFileName.replace(/\$(\d+)/g, function (match, key) {
								return _file[key];
							});

							switch (taskName) {
								case 'uglify' :
									uglify(_destName, _file, _tempSubTask, true);
									break;

								case 'cleancss' :
									cleancss(_destName, _file, _tempSubTask, true);
									break;
							}
						}

					} else {
						// 普通文件组合处理
						switch (taskName) {
							case 'uglify' :
								uglify(destFileName, result, _tempSubTask, false);
								break;

							case 'cleancss' :
								cleancss(destFileName, result, _tempSubTask, false);
								break;
						}
					}
				}

			} else if (fats.util.inArray(taskName, ['csslint', 'jshint'])) {  //校验

				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					if (_tempGroupName == 'options') {
						continue;
					}
					var _tempGroup = _tempTask[_tempGroupName];
					var regex = _tempGroup.src;
					var result = taskParser.regexFiles(regex, fileList);   // 待处理的文件数组
					var fileArr = [];
					for (var i = 0; i < result.files.length; i++) {
						fileArr.push(result.files[i][0]);
					}

					var opt = _tempGroup.options || {};
					switch (taskName) {

						case 'csslint' :
							require('./csslint')(fileArr, env.root, _tempGroupName, opt);
							break;

						case 'jshint' :

							require('./jshint')(fileArr, env.root, _tempGroupName, opt);
							break;
					}
				}

			}

			console.log(' ');

		}

		/*
		 * 执行系统累加任务
		 * */


		console.log(' Done, without errors.'.green);


	};

};