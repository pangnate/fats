module.exports = function () {

	var plugins = [
		'csslint',  // css校验
		'jshint',  // js校验
		'uglify',  // js格式化压缩合并
		'cleancss' // css格式化压缩合并
	];

	var fats = this;
	var path = require('path');
	var fs = require('fs');
	var taskParser = require('./taskParse');
	var taskConfig = fats.taskConfig;
	var taskList = taskConfig.taskList;
	var env = taskConfig.env;

	/*
	 * 没有配置任务，则给出 warning 提示
	 * */
	if (!taskList) {
		fats.log.warning('No tasks need to be executed, has been terminated.');
		process.exit(0);
	}

	/*
	 * 遍历目录下的所有文件，缓存信息备用
	 * */
	var ndir = require('ndir');
	var walker = ndir.walk(env.root);
	var fileList = {};
	walker.on('dir', function (dirpath, files) {
		for (var i = 0, l = files.length; i < l; i++) {
			var info = files[i];
			if (info[1].isFile()) {
				var src = info[0].replace(/\\{1,}/g, '/');
				var regExp = /[^\x00-\xff]/i;
				if (regExp.test(src)) {
					fats.log.error('File name not allowed: ' + src, true);
				}

				// 扩展名
				var ext = path.extname(src);
				// 忽略列表
				var ignore = ['.psd', '.doc'];
				// min版本
				var minRegExp = new RegExp('[\.\-]min' + ext + '$', 'i');
				if (!fats.util.inArray(ext, ignore) && !minRegExp.test(src)) {
					var data = fats.util.read(src);
					var _temp = {
						md5: fats.util.md5(data),
						size: info[1].size
					};
					fileList[src] = _temp;
				}
			}
		}
	});
	walker.on('error', function (err, errPath) {
		fats.log.error('%s error: %s', errPath, err);
	});
	walker.on('end', function () {
		cacheTask();
		runTask();
	});

	/*
	 * 解析并缓存所有任务
	 * */
	var cacheTask = function () {
		var topParsed = taskList._parsed = {};

		for (var taskName in taskList) {

			/*
			 * 注册任务名称，合法的则执行，不合法的则直接抛弃
			 * */
			if (!fats.util.inArray(taskName, plugins)) {
				continue;
			}

			/*
			 * taskObject: 系统规定的任务名称，如：csslint
			 * 对应相应的功能模块，不可更改
			 * */
			var taskObject = taskList[taskName];
			topParsed[taskName] = {};

			for (var subTaskKey in taskObject) {

				/*
				 * subTaskKey: 用户自定义的任务组名称，不具有实际意义，如：task1
				 * subTask: 具体的子任务组
				 * subTaskOptions: 具体子任务组的 options 项
				 * subTaskConfigKey: 具体子任务的任务分组名称，不具备实际意义
				 * */
				var subTask = taskObject[subTaskKey];

				var _parsed = {};
				_parsed.taskList = {};

				for (var subTaskConfigKey in subTask) {

					/*
					 * 解析 options 项
					 * */
					if ('options' == subTaskConfigKey) {
						var subTaskOptions = subTask.options;
						_parsed.options = {};
						for (var optionsKey in subTaskOptions) {
							if ('undefined' != typeof taskParser[optionsKey]) {
								var parsed = taskParser[optionsKey](subTaskOptions[optionsKey]);
								_parsed.options[optionsKey] = parsed;
							} else {
								_parsed.options[optionsKey] = subTaskOptions[optionsKey];
							}
						}
					} else {
						/*
						 * 解析其余任务分组，并剔除重复任务
						 * */
						if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并

							var _tempSubTask = subTask[subTaskConfigKey];
							if (_tempSubTask.hasOwnProperty('src') && _tempSubTask.hasOwnProperty('dest')) {
								var src = taskParser.filesPara(_tempSubTask.src, env.root, true);
								var dest = taskParser.filesPara(_tempSubTask.dest, env.root);
								_parsed.taskList[dest] = src;
							} else {
								for (var _key in _tempSubTask) {
									var src = taskParser.filesPara(_tempSubTask[_key], env.root, true);
									var dest = taskParser.filesPara(_key, env.root);
									_parsed.taskList[dest] = src;
								}
							}

						} else if (fats.util.inArray(taskName, ['csslint', 'jshint'])) {  //校验
							if ('files' == subTaskConfigKey) {
								var src = subTask[subTaskConfigKey], _temp = [];
								if ('string' == typeof src && !/,/.test(src)) {
									_temp.push(taskParser.filesPara(src, env.root, true));
								} else if (fats.util.isArray(src)) {
									for (var i = 0; i < src.length; i++) {
										_temp.push(taskParser.filesPara(src[i], env.root, true));
									}
								}
								_parsed.taskList.files = _temp;
							}

						}
					}

				}


				/*
				 * 缓存至顶层备用
				 * */
				topParsed[taskName][subTaskKey] = _parsed;

			}

		}

	};

	/*
	 * 写文件
	 * */
	var root = env.root.replace(/\\/g, '/');
	var writeFile = function (destFileName, code, srcFileSize, resultSize) {
		var shortName = destFileName.replace(root, '');
		srcFileSize = fats.util.formatFileSize(srcFileSize);
		resultSize = fats.util.formatFileSize(resultSize);
		var targetDir = path.dirname(destFileName);

		// 如果目标目录不存在则新建
		if (!fats.util.exists(targetDir)) {
			ndir.mkdir(targetDir, function (err) {
				fs.writeFileSync(destFileName, code);
			});
		} else {
			fs.writeFileSync(destFileName, code);
		}
		var key = destFileName.replace(/\\/g, '/');
		fileList[key] = {
			md5: fats.util.md5(code),
			size: code.length
		};
		console.log(' File ' + shortName.cyan + ' created: ' + srcFileSize.green + ' → ' + resultSize.green);
	};

	/*
	 * cleancss  编译 cleancss 任务
	 * @param String destFileName  目标文件
	 * @param Object result
	 * @param Object SubTask
	 * @param Boolean  是否为 $1 方式单个文件
	 * */
	var cleancss = function (destFileName, result, _tempSubTask, single) {

		// 总文件体积
		var srcFileSize = result.totalSize;  // src size

		// minify
		var CleanCSS = require('clean-css'),
			cleancss = new CleanCSS({
				compatibility: fats.config.get('cssCompatibility') || ''
			});

		// 处理文件字符
		var filterCssStr = function(temp){
			var code = cleancss.minify(temp);
			// banner
			if (_tempSubTask.options && _tempSubTask.options.banner) {
				code = _tempSubTask.options.banner + code;
			}
			// md5 && urlPrefix
			var urlPrefix = false;
			if (_tempSubTask.options && _tempSubTask.options.urlPrefix) {
				urlPrefix = _tempSubTask.options.urlPrefix
			}
			code = taskParser.cssImgMD5({
				source: code,
				fileList: fileList,
				destRoot: path.dirname(destFileName),
				urlPrefix: urlPrefix
			});
			return code;
		};

		var temp = '';
		if (single == true) {  // 如果是单个文件
			temp = fats.util.read(result[0], true);
			var code = filterCssStr(temp);
			var srcFileSize = temp.length;
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		} else {  // 如果是普通匹配
			for (var i = 0; i < result.files.length; i++) {
				temp += fats.util.read(result.files[i][0], true);
			}
			var code = filterCssStr(temp);
			var resultFileSize = code.length;

			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		}
	};


	/*
	 * uglify  编译 uglify 任务
	 * @param String destFileName  目标文件
	 * @param Object result
	 * @param Object SubTask
	 * @param Boolean  是否为 $1 方式单个文件
	 * */
	var uglify = function (destFileName, result, _tempSubTask, single) {

		// 处理文件字符
		var filterJsStr = function(code){
			// banner
			if (_tempSubTask.options && _tempSubTask.options.banner) {
				code = _tempSubTask.options.banner + code;
			}
			return code;
		};

		// 总文件体积
		var srcFileSize = result.totalSize;  // src size

		var UglifyJS = require('uglify-js');
		var jsArr = [];

		if (single == true) {  // 如果是单个文件
			jsArr.push(result[0]);
			var code = UglifyJS.minify(jsArr).code;
			code = filterJsStr(code);
			var srcFileSize = fats.util.read(jsArr[0], true).length;
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		} else {  // 如果是普通匹配
			for(var i=0; i<result.files.length; i++){
				jsArr.push(result.files[i][0]);
			}
			var code = UglifyJS.minify(jsArr).code;
			code = filterJsStr(code);
			var resultFileSize = code.length;
			// writeFile
			writeFile(destFileName, code, srcFileSize, resultFileSize);
		}
	};


	/*
	 * 顺序执行任务
	 * */
	var runTask = function () {

		var topParsed = taskConfig.taskList._parsed;
		for (var taskName in topParsed) {

			console.log(' Run <' + taskName + '> task');

			if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并
				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					var _tempSubTask = _tempTask[_tempGroupName];
					for (var dest in _tempSubTask.taskList) {
						var regex = _tempSubTask.taskList[dest];
						var destFileName = dest;  // dest
						var result = taskParser.regexFiles(regex, fileList);  // src

						// 如果文件列表为空
						if (result.files.length == 0) {
							var str = ' <' + _tempGroupName + '> <' + dest.replace(root, '') + '>: No files, skipped';
							console.log(str.yellow.bold);
							continue;
						}

						/*
						 * 如果 dest中 出现 $1 之类，则需要每个文件单独处理
						 * */
 						if (/\$\d+/.test(destFileName)) {

							for (var i = 0; i < result.files.length; i++) {
								var _file = result.files[i];
								var _destName = destFileName.replace(/\$(\d+)/g, function (match, key) {
									return _file[key];
								});

								switch (taskName) {
									case 'uglify' :
										uglify(_destName, _file, _tempSubTask, true);
										break;

									case 'cleancss' :
										cleancss(_destName, _file, _tempSubTask, true);
										break;
								}
							}

						} else {
							// 普通文件组合处理
						    switch (taskName) {
							    case 'uglify' :
								    uglify(destFileName, result, _tempSubTask, false);
								    break;

							    case 'cleancss' :
								    cleancss(destFileName, result, _tempSubTask, false);
								    break;
						    }
						}

					}
				}

			} else if (fats.util.inArray(taskName, ['csslint', 'jshint'])) {  //校验

				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					var _tempSubTask = _tempTask[_tempGroupName];
					var regex = _tempSubTask.taskList.files;
					var result = taskParser.regexFiles(regex, fileList);   // 待处理的文件数组

					switch (taskName) {

						case 'csslint' :
							require('./csslint')(result.files, env.root);
							break;

						case 'jshint' :

							require('./jshint')(result.files, env.root);
							break;
					}
				}

			}

			console.log(' ');

		}

		/*
		 * 执行系统累加任务
		 * */


		console.log(' Done, without errors.'.green);


	};

};